"""
Django settings for ac_mm_system project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
import sys
import os
import json
from celery.schedules import crontab
from pathlib import Path

# Secrets Keys
try:
    with open('secrets.json') as f:
        secrets = json.load(f)
except FileNotFoundError:
    print("Arquivo não encontrado. Crie o arquivo secrets.json com as chaves 'SECRET_KEY', 'EMAIL_HOST_USER' e 'EMAIL_HOST_PASSWORD'.")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '*',
]

# Application definition

INSTALLED_APPS = [
    # Minhas aplicações
    'website',
    'accounts',

    # Aplicações default do django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Aplicações de terceiros
    'django_bootstrap5',
    'chartjs',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ac_mm_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ac_mm_system.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Minhas configurações

# Login/Logout
LOGIN_REDIRECT_URL = 'website:pagina_inicial'
LOGOUT_REDIRECT_URL = 'accounts:login'
LOGIN_URL = 'accounts:login'

# Configuração do Email
# Email via Web
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = secrets['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = secrets['EMAIL_HOST_PASSWORD']
DEFAULT_FROM_EMAIL = f"ChronoAir <{EMAIL_HOST_USER}>"

# Email via Terminal
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = 1025
# EMAIL_USE_TLS = False
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = ''  # Não necessário
# EMAIL_HOST_PASSWORD = ''  # Não necessário

# MQTT Broker
# Configurações do broker MQTT (HiveMQ com autenticação)
MQTT_BROKER = secrets['MQTT_BROKER_HOST']
MQTT_PORT = secrets['MQTT_PORT_TLS']
MQTT_CLIENT_ID = 'django_mqtt_client'
# Caminho para o certificado CA
MQTT_TLS_CERT = os.path.join(BASE_DIR, 'certificates', 'hivemq-ca.pem')
MQTT_USERNAME = secrets['MQTT_USERNAME_HIVE_MQ']
MQTT_PASSWORD = secrets['MQTT_PASSWORD_HIVE_MQ']
MQTT_KEEPALIVE = 60

# Celery
CELERY_BROKER_URL = 'pyamqp://guest@localhost//'  # URL do broker RabbitMQ
CELERY_TIMEZONE = 'America/Sao_Paulo'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {
    'verificar_horarios_cada_minuto': {
        'task': 'website.tasks.verificar_horarios',
        'schedule': crontab(),  # Executa a cada minuto
    },
    'verificar_periodo_30_em_horario_comercial': {
        'task': 'website.tasks.verificar_periodo',
        # a cada 30 min entre 6h e 21h59
        'schedule': crontab(minute='*/30', hour='6-21'),
    },
    'verificar_periodo_1h_madrugada': {
        'task': 'website.tasks.verificar_periodo',
        # a cada 1h entre 22h e 5h59
        'schedule': crontab(minute=0, hour='0-5,22-23'),
    },
}
CELERY_TASK_ACKS_LATE = True  # Para garantir que a tarefa seja re-executada se falhar
# Para garantir que a tarefa seja re-executada se o worker falhar
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_DEFAULT_RETRY_DELAY = 5  # Tempo de espera antes de tentar novamente
CELERY_TASK_MAX_RETRIES = 3  # Número máximo de tentativas

# Segurança
# # Só envia cookies de sessão por HTTPS (usar apenas em produção)
# SESSION_COOKIE_SECURE = True
# # Só envia CSRF cookie por HTTPS (usar apenas em produção)
# CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True    # Bloqueia acesso ao cookie via JavaScript
CSRF_COOKIE_HTTPONLY = True       # Protege o cookie CSRF também
# Timeout de sessão
SESSION_COOKIE_AGE = 600         # Sessão expira depois desse tempo (segundos)
# Renova o tempo da sessão após alguma requisição
SESSION_SAVE_EVERY_REQUEST = True
# Timeout redefinição de senha
PASSWORD_RESET_TIMEOUT = 1800  # Token expira depois desse tempo(em segundos)
